// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: cache/grpc/cache.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Cache_GetNextNodeIdByKey_FullMethodName = "/cacheGrpc.Cache/GetNextNodeIdByKey"
	Cache_UpdateCache_FullMethodName        = "/cacheGrpc.Cache/UpdateCache"
	Cache_GetState_FullMethodName           = "/cacheGrpc.Cache/GetState"
)

// CacheClient is the client API for Cache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheClient interface {
	GetNextNodeIdByKey(ctx context.Context, in *GetNextNodeIdByKeyRequest, opts ...grpc.CallOption) (*GetNextNodeIdByKeyResponse, error)
	UpdateCache(ctx context.Context, in *UpdateCacheRequest, opts ...grpc.CallOption) (*UpdateCacheResponse, error)
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
}

type cacheClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheClient(cc grpc.ClientConnInterface) CacheClient {
	return &cacheClient{cc}
}

func (c *cacheClient) GetNextNodeIdByKey(ctx context.Context, in *GetNextNodeIdByKeyRequest, opts ...grpc.CallOption) (*GetNextNodeIdByKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNextNodeIdByKeyResponse)
	err := c.cc.Invoke(ctx, Cache_GetNextNodeIdByKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) UpdateCache(ctx context.Context, in *UpdateCacheRequest, opts ...grpc.CallOption) (*UpdateCacheResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCacheResponse)
	err := c.cc.Invoke(ctx, Cache_UpdateCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, Cache_GetState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheServer is the server API for Cache service.
// All implementations must embed UnimplementedCacheServer
// for forward compatibility.
type CacheServer interface {
	GetNextNodeIdByKey(context.Context, *GetNextNodeIdByKeyRequest) (*GetNextNodeIdByKeyResponse, error)
	UpdateCache(context.Context, *UpdateCacheRequest) (*UpdateCacheResponse, error)
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	mustEmbedUnimplementedCacheServer()
}

// UnimplementedCacheServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCacheServer struct{}

func (UnimplementedCacheServer) GetNextNodeIdByKey(context.Context, *GetNextNodeIdByKeyRequest) (*GetNextNodeIdByKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextNodeIdByKey not implemented")
}
func (UnimplementedCacheServer) UpdateCache(context.Context, *UpdateCacheRequest) (*UpdateCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCache not implemented")
}
func (UnimplementedCacheServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedCacheServer) mustEmbedUnimplementedCacheServer() {}
func (UnimplementedCacheServer) testEmbeddedByValue()               {}

// UnsafeCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheServer will
// result in compilation errors.
type UnsafeCacheServer interface {
	mustEmbedUnimplementedCacheServer()
}

func RegisterCacheServer(s grpc.ServiceRegistrar, srv CacheServer) {
	// If the following call pancis, it indicates UnimplementedCacheServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Cache_ServiceDesc, srv)
}

func _Cache_GetNextNodeIdByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextNodeIdByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).GetNextNodeIdByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_GetNextNodeIdByKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).GetNextNodeIdByKey(ctx, req.(*GetNextNodeIdByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_UpdateCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).UpdateCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_UpdateCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).UpdateCache(ctx, req.(*UpdateCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cache_ServiceDesc is the grpc.ServiceDesc for Cache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cacheGrpc.Cache",
	HandlerType: (*CacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNextNodeIdByKey",
			Handler:    _Cache_GetNextNodeIdByKey_Handler,
		},
		{
			MethodName: "UpdateCache",
			Handler:    _Cache_UpdateCache_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _Cache_GetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cache/grpc/cache.proto",
}
